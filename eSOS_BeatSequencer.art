// == ASSIGNMENT ==


-assignStr
_str |> __string(_)
---
assign(_ID, _str), _sig, _parallelMap -> __done, __put(_sig, _ID, _str), _parallelMap

-assignInt
_n |> __int32(_)   
---
assign(_X, _n), _sig, _parallelMap -> __done, __put(_sig, _X, _n), _parallelMap

-assignIntResolve
_E, _sig, _parallelMap -> _I, _sigP, _parallelMapP 
---
assign(_X,_E), _sig, _parallelMap -> assign(_X, _I), _sigP, _parallelMapP

-assignStrResolve
_str, _sig, _parallelMap -> _strP, _sigP, _parallelMapP
---
assign(_ID, _str), _sig, _parallelMap -> assign(_ID, _strP), _sigP, _parallelMapP

// Returns __string
-modulate
_phrase |> __string(_) _n |> __int32(_)
---
modulate(_phrase, _n), _sig, _parallelMap -> __user(2, _phrase, _n), _sig, _parallelMap

-modulateResolveRight
_phrase |> __string(_) _E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP
---
modulate(_phrase, _E1), _sig, _parallelMap -> modulate(_phrase, _I1), _sigP, _parallelMapP

-modulateResolveLeft
_phrase, _sig, _parallelMap -> _phraseP, _sigP, _parallelMapP
---
modulate(_phrase, _E1), _sig, _parallelMap -> modulate(_phraseP, _E1), _sigP, _parallelMapP

// == SEQUENCING ==
-sequenceDone
---
seq(__done, _C), _sig, _parallelMap -> _C, _sig, _parallelMap

-sequence 
_C1, _sig, _parallelMap -> _C1P, _sigP, _parallelMapP
---
seq(_C1, _C2), _sig, _parallelMap -> seq(_C1P, _C2), _sigP, _parallelMapP

// == ARITHMETIC ==
-add
_n1 |> __int32(_) _n2 |> __int32(_)
---
add(_n1, _n2), _sig, _parallelMap -> __add(_n1, _n2), _sig, _parallelMap

-addRight
_n |> __int32(_) _E2, _sig, _parallelMap -> _I2, _sigP, _parallelMapP
---
add(_n, _E2), _sig, _parallelMap -> add(_n, _I2), _sigP, _parallelMapP

-addLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP
---
add(_E1, _E2), _sig, _parallelMap -> add(_I1, _E2), _sigP, _parallelMapP

-sub
_n1 |> __int32(_) _n2 |> __int32(_)
---
sub(_n1, _n2),_sig, _parallelMap ->  __sub(_n1, _n2),_sig, _parallelMap

-subRight
_n |> __int32(_) _E2,_sig, _parallelMap -> _I2,_sigP, _parallelMapP   
---
sub(_n, _E2),_sig, _parallelMap -> sub(_n, _I2), _sigP, _parallelMapP

-subLeft
_E1,_sig, _parallelMap -> _I1,_sigP, _parallelMapP
---
sub(_E1, _E2),_sig, _parallelMap -> sub(_I1, _E2), _sigP, _parallelMapP

-mul
_n1 |> __int32(_) _n2 |> __int32(_)
---
mul(_n1, _n2), _sig, _parallelMap -> __mul(_n1, _n2), _sig, _parallelMap

-mulRight
_n |> __int32(_) _E2, _sig, _parallelMap -> _I2, _sigP, _parallelMapP
---
mul(_n, _E2), _sig, _parallelMap -> mul(_n, _I2), _sigP, _parallelMapP

-mulLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP
---
mul(_E1, _E2), _sig, _parallelMap -> mul(_I1, _E2), _sigP, _parallelMapP

-div
_n1 |> __int32(_) _n2 |> __int32(_)
---
div(_n1, _n2), _sig, _parallelMap -> __div(_n1, _n2), _sig, _parallelMap

-divRight
_n |> __int32(_) _E2, _sig, _parallelMap -> _I2, _sigP, _parallelMapP
---
div(_n, _E2), _sig, _parallelMap -> div(_n, _I2), _sigP, _parallelMapP

-divLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP
---
div(_E1, _E2), _sig, _parallelMap -> div(_I1, _E2), _sigP, _parallelMapP

// == RELATIONAL ==
-gt
_n1 |> __int32(_) _n2 |> __int32(_)
---
gt(_n1, _n2),_sig, _parallelMap ->  __gt(_n1, _n2),_sig, _parallelMap 

-gtRight
_n |> __int32(_) _E2, _sig, _parallelMap -> _I2,_sigP, _parallelMapP 
---
gt(_n, _E2),_sig, _parallelMap -> gt(_n, _I2), _sigP, _parallelMapP

-gtLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP 
---
gt(_E1, _E2),_sig, _parallelMap -> gt(_I1, _E2), _sigP, _parallelMapP

-ge
_n1 |> __int32(_) _n2 |> __int32(_)
---
ge(_n1, _n2),_sig, _parallelMap ->  __ge(_n1, _n2),_sig, _parallelMap 

-geRight
_n |> __int32(_) _E2, _sig, _parallelMap -> _I2,_sigP, _parallelMapP 
---
ge(_n, _E2),_sig, _parallelMap -> ge(_n, _I2), _sigP, _parallelMapP

-geLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP 
---
ge(_E1, _E2),_sig, _parallelMap -> ge(_I1, _E2), _sigP, _parallelMapP

-lt
_n1 |> __int32(_) _n2 |> __int32(_)
---
lt(_n1, _n2), _sig, _parallelMap -> __lt(_n1, _n2), _sig, _parallelMap

-ltRight
_n |> __int32(_) _E2, _sig, _parallelMap -> _I2, _sigP, _parallelMapP
---
lt(_n, _E2), _sig, _parallelMap -> lt(_n, _I2), _sigP, _parallelMapP

-ltLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP
---
lt(_E1, _E2), _sig, _parallelMap -> lt(_I1, _E2), _sigP, _parallelMapP

-le
_n1 |> __int32(_) _n2 |> __int32(_)
---
le(_n1, _n2), _sig, _parallelMap -> __le(_n1, _n2), _sig, _parallelMap

-leRight
_n |> __int32(_) _E2, _sig, _parallelMap -> _I2, _sigP, _parallelMapP
---
le(_n, _E2), _sig, _parallelMap -> le(_n, _I2), _sigP, _parallelMapP

-leLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP
---
le(_E1, _E2), _sig, _parallelMap -> le(_I1, _E2), _sigP, _parallelMapP

-ne
_n1 |> __int32(_) _n2 |> __int32(_)
---
ne(_n1, _n2),_sig, _parallelMap ->  __ne(_n1, _n2),_sig, _parallelMap

-neRight
_n |> __int32(_)  _E2, _sig, _parallelMap -> _I2,_sigP, _parallelMapP 
---
ne(_n, _E2),_sig, _parallelMap -> ne(_n, _I2), _sigP, _parallelMapP

-neLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP 
---
ne(_E1, _E2),_sig, _parallelMap -> ne(_I1, _E2), _sigP, _parallelMapP

-eq
_n1 |> __int32(_) _n2 |> __int32(_)
---
eq(_n1, _n2),_sig, _parallelMap ->  __eq(_n1, _n2),_sig, _parallelMap

-eqRight
_n |> __int32(_)  _E2, _sig, _parallelMap -> _I2,_sigP, _parallelMapP 
---
eq(_n, _E2),_sig, _parallelMap -> eq(_n, _I2), _sigP, _parallelMapP

-eqLeft
_E1, _sig, _parallelMap -> _I1, _sigP, _parallelMapP 
---
eq(_E1, _E2),_sig, _parallelMap -> eq(_I1, _E2), _sigP, _parallelMapP

// == CONTROL FLOW ==
-ifTrue 
---
if(True, _C1, _C2),_sig, _parallelMap -> _C1, _sig, _parallelMap

-ifFalse 
---
if(False, _C1, _C2),_sig, _parallelMap -> _C2,_sig, _parallelMap

-ifResolve
_E, _sig, _parallelMap -> _EP, _sigP, _parallelMapP
---
if(_E,_C1,_C2),_sig, _parallelMap -> if(_EP, _C1, _C2), _sigP, _parallelMapP

-while
---
while(_E, _C),_sig, _parallelMap -> if(_E, seq(_C, while(_E,_C)), __done), _sig, _parallelMap

-variable
---
deref(_R), _sig, _parallelMap -> __get(_sig, _R), _sig, _parallelMap

-play
_channel |> __int32(_) _phrase |> __string(_)
---
play(_channel, _phrase), _sig, _parallelMap -> __user(1, _channel, _phrase), _sig, _parallelMap

-playResolve
_phrase, _sig, _parallelMap -> _phraseP, _sigP, _parallelMapP
---
play(_channel, _phrase), _sig, _parallelMap -> play(_channel, _phraseP), _sigP, _parallelMapP

-setBpm
_n |> __int32(_)
---
setBpm(_n), _sig, _parallelMap -> __user(0, _n), _sig, _parallelMap

-setBpmResolve
_E1 -> _I1
---
setBpm(_E1), _sig, _parallelMap -> setBpm(_I1), _sig, _parallelMap

-concat
_phrase1 |> __string(_) _phrase2 |> __string(_)
---
concat(_phrase1, _phrase2), _sig, _parallelMap -> __user(3, _phrase1, _phrase2), _sig, _parallelMap

-concatResolveRight
_phrase1 |> __string(_) _phrase2, _sig, _parallelMap -> _phrase2P, _sigP, _parallelMapP
---
concat(_phrase1, _phrase2), _sig, _parallelMap -> concat(_phrase1, _phrase2P), _sigP, _parallelMapP

-concatResolveLeft
_phrase1, _sig, _parallelMap -> _phrase1P, _sigP, _parallelMapP
---
concat(_phrase1, _phrase2), _sig, _parallelMap -> concat(_phrase1P, _phrase2), _sigP, _parallelMapP

-repeat
_phrase |> __string(_) _n |> __int32(_)
---
repeat(_phrase, _n), _sig, _parallelMap -> __user(4, _phrase, _n), _sig, _parallelMap

-repeatResolveRight
_phrase |> __string(_) _n, _sig, _parallelMap -> _nP, _sigP, _parallelMapP
---
repeat(_phrase, _n), _sig, _parallelMap -> _repeat(_phrase, _nP), _sigP, _parallelMapP

-repeatResolveLeft
_phrase, _sig, _parallelMap -> _phraseP, _sigP, _parallelMapP
---
repeat(_phrase, _n), _sig, _parallelMap -> repeat(_phraseP, _n), _sigP, _parallelMapP

-printAvailableInstruments
---
printAvailableInstruments(), _sig, _parallelMap -> __user(5)

// No resolving ints for this one - just set a given channel to an instrument
-setChannelInstrument
_channel |> __int32(_) _instrument |> __int32(_)
---
setChannelInstrument(_channel, _instrument), _sig, _parallelMap -> __user(6, _channel, _instrument), _sig, _parallelMap


-playParallelLeafNode
_channel |> __int32(_) _phrase |> __string(_) 
---
playParallel(_channel, _phrase), _sig, _parallelMap -> __done, _sig, __put(_parallelMap, _channel, _phrase) 

-playParallelLeafNodeResolvePhrase
_channel |> __int32(_) _phrase, _sig, _parallelMap -> _phraseP, _sigP, _parallelMapP
---
playParallel(_channel, _phrase), _sig, _parallelMap -> playParallel(_channel, _phraseP), _sigP, _parallelMapP

-playParallelNextIsDone
_channel |> __int32(_) _phrase |> __string(_) _next |> __done
---
playParallel(_channel, _phrase, _next), _sig, _parallelMap -> playParallel(_channel, _phrase), _sig, _parallelMap

-playParallelResolveNext
_channel |> __int32(_) _phrase |> __string(_) _next, _sig, _parallelMap -> _nextP, _sigP, _parallelMapP
---
playParallel(_channel, _phrase, _next), _sig, _parallelMap -> playParallel(_channel, _phrase, _nextP), _sigP, _parallelMapP

-playParallelResolvePhrase
_phrase, _sig, _parallelMap -> _phraseP, _sigP, _parallelMapP
---
playParallel(_channel, _phrase, _next), _sig, _parallelMap -> playParallel(_channel, _phraseP, _next), _sigP, _parallelMapP

-playAll
---
playAll(), _sig, _parallelMap -> __user(7, _parallelMap), _sig, _parallelMap

!trace 3
//!try seq(assign(a, 15), seq(seq(seq(assign(b, 9), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a)))))), assign(gcd, deref(a))), backend(1, 2, 3)))
// !try seq(seq(seq(seq(assign(a, 15), assign(b, 9)), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a)))))), assign(gcd, deref(a))), backend(1, 2, 3))
// !try seq(assign(cMajScale, "[C:4:8, D:4:8, E:4:8, F:4:8, G:4:8, A:4:8, B:4:8, C:5:8]"),assign(x, 5)), __map
// !try add(1, 2), __map
// !try sub(1, 2), __map
// !try mul(4, 5), __map
// !try div(4, 5), __map
// !try div(9, 5), __map
// !try eq(1, 1), __map
// !try ne(1, 1), __map
// !try gt(1, 1), __map
// !try ge(1, 1), __map
// !try lt(1, 1), __map
// !try le(1, 1), __map
// Test if-then-else
// !try if(gt(2,1), assign(x, "True"), assign(x, "False")), __map
// Test if-then with no else (just use __done)
// !try if(lt(2, 1), assign(x,"True"), __done), __map
// !try seq( seq( seq( seq(assign(a, 15), assign(b, 9) ), while( ne(deref(a), deref(b)), if( gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a))))) ), assign(gcd, deref(a))), __done), __map // Test while with sub !try seq( assign(a, 10), while( ne(deref(a), 11), assign(a, add(deref(a), 1)) ) ), __map

// Test while loop
// !try seq( setBpm(120), seq( assign( n, 0 ), seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), while( ne(deref(n), 4), seq( play(1, deref(x)), assign(n, add(deref(n), 1) ) ) ) ) )), __map

// test modulation
// !try seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), play(1, modulate( deref(x), 5 ) ) ) , __map
// Test modulation and assignment
// !try seq( setBpm(120), seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), seq( assign( y, modulate(deref(x), 5) ), seq( play(1, deref(x)), play(1, deref(y)) ) ) ) ), __map

// Test anonymous phrases modulated from a named phrase
// !try seq( setBpm(120), seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), seq( assign( n, 0 ), while( ne(deref(n), 4), seq( play(1, modulate(deref(x), deref(n)) ), assign(n, add(deref(n), 1)) ) ) ) ) ), __map

// Concatenate two phrases, assign to x, and play them.
// !try seq( setBpm(120), seq( assign( x, concat( "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8]", "[Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ) ), play(1, deref(x) ) )), __map

// Repeat phrase
// !try seq( setBpm(240), seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), play(1, repeat( deref(x), 4) ) ) ), __map

!try printAvailableInstruments(), __map, __map

// !try seq(setBpm(120), seq( setChannelInstrument(1, 90) , play(1, "[C4:4, E4:4, G4:4, C5:4]") ) ), __map

// Chords in a phrase
// !try seq( setBpm(120), play(1, "[C4:8, E4:8, G4:8, C5:8, .:8, {G4-B4-D4}:8, .:8, {C4-E4-G4}:8, .:8, C2:4]") ), __map

// Parallel threads
// !try playParallel(1, "[B4:8, C4:8, E4:4]", playParallel(2, "[E4:8]", playParallel(3, "[G4:8]"))), __map, __map

// Sweet dreams with drums!
!try seq(
  setBpm(120),
  seq(
  setChannelInstrument(1, 45),
  seq(
    setChannelInstrument(2,128),
    seq(
    playParallel(
      1, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]",
      playParallel(
        2, repeat("[C3:4, C3:4, C3:4, C3:4]", 1)
      )
    ), playAll())
  ))), __map, __map