// == ASSIGNMENT ==
-assignStr
_str |> __string(_)
---
assign(_ID, _str), _sig -> __done, __put(_sig, _ID, _str)

-assignInt
_n |> __int32(_)   
---
assign(_X, _n), _sig -> __done, __put(_sig, _X, _n)

-assignIntResolve
_E, _sig -> _I, _sigP 
---
assign(_X,_E), _sig -> assign(_X, _I), _sigP

-assignStrResolve
_str, _sig -> _strP, _sigP
---
assign(_ID, _str), _sig -> assign(_ID, _strP), _sigP

// Returns __string
-modulate
_phrase |> __string(_) _n |> __int32(_)
---
modulate(_phrase, _n), _sig -> __user(2, _phrase, _n), _sig

-modulateResolveRight
_phrase |> __string(_) _E1, _sig -> _I1, _sigP
---
modulate(_phrase, _E1), _sig -> modulate(_phrase, _I1), _sigP

-modulateResolveLeft
_phrase, _sig -> _phraseP, _sigP
---
modulate(_phrase, _E1), _sig -> modulate(_phraseP, _E1), _sigP

// == SEQUENCING ==
-sequenceDone
---
seq(__done, _C), _sig -> _C, _sig

-sequence 
_C1, _sig -> _C1P, _sigP
---
seq(_C1, _C2), _sig -> seq(_C1P, _C2), _sigP

// == ARITHMETIC ==
-add
_n1 |> __int32(_) _n2 |> __int32(_)
---
add(_n1, _n2), _sig -> __add(_n1, _n2), _sig

-addRight
_n |> __int32(_) _E2, _sig -> _I2, _sigP
---
add(_n, _E2), _sig -> add(_n, _I2), _sigP

-addLeft
_E1, _sig -> _I1, _sigP
---
add(_E1, _E2), _sig -> add(_I1, _E2), _sigP

-sub
_n1 |> __int32(_) _n2 |> __int32(_)
---
sub(_n1, _n2),_sig ->  __sub(_n1, _n2),_sig

-subRight
_n |> __int32(_) _E2,_sig -> _I2,_sigP   
---
sub(_n, _E2),_sig -> sub(_n, _I2), _sigP

-subLeft
_E1,_sig -> _I1,_sigP
---
sub(_E1, _E2),_sig -> sub(_I1, _E2), _sigP

-mul
_n1 |> __int32(_) _n2 |> __int32(_)
---
mul(_n1, _n2), _sig -> __mul(_n1, _n2), _sig

-mulRight
_n |> __int32(_) _E2, _sig -> _I2, _sigP
---
mul(_n, _E2), _sig -> mul(_n, _I2), _sigP

-mulLeft
_E1, _sig -> _I1, _sigP
---
mul(_E1, _E2), _sig -> mul(_I1, _E2), _sigP

-div
_n1 |> __int32(_) _n2 |> __int32(_)
---
div(_n1, _n2), _sig -> __div(_n1, _n2), _sig

-divRight
_n |> __int32(_) _E2, _sig -> _I2, _sigP
---
div(_n, _E2), _sig -> div(_n, _I2), _sigP

-divLeft
_E1, _sig -> _I1, _sigP
---
div(_E1, _E2), _sig -> div(_I1, _E2), _sigP

// == RELATIONAL ==
-gt
_n1 |> __int32(_) _n2 |> __int32(_)
---
gt(_n1, _n2),_sig ->  __gt(_n1, _n2),_sig 

-gtRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
gt(_n, _E2),_sig -> gt(_n, _I2), _sigP

-gtLeft
_E1, _sig -> _I1, _sigP 
---
gt(_E1, _E2),_sig -> gt(_I1, _E2), _sigP

-ge
_n1 |> __int32(_) _n2 |> __int32(_)
---
ge(_n1, _n2),_sig ->  __ge(_n1, _n2),_sig 

-geRight
_n |> __int32(_) _E2, _sig -> _I2,_sigP 
---
ge(_n, _E2),_sig -> ge(_n, _I2), _sigP

-geLeft
_E1, _sig -> _I1, _sigP 
---
ge(_E1, _E2),_sig -> ge(_I1, _E2), _sigP

-lt
_n1 |> __int32(_) _n2 |> __int32(_)
---
lt(_n1, _n2), _sig -> __lt(_n1, _n2), _sig

-ltRight
_n |> __int32(_) _E2, _sig -> _I2, _sigP
---
lt(_n, _E2), _sig -> lt(_n, _I2), _sigP

-ltLeft
_E1, _sig -> _I1, _sigP
---
lt(_E1, _E2), _sig -> lt(_I1, _E2), _sigP

-le
_n1 |> __int32(_) _n2 |> __int32(_)
---
le(_n1, _n2), _sig -> __le(_n1, _n2), _sig

-leRight
_n |> __int32(_) _E2, _sig -> _I2, _sigP
---
le(_n, _E2), _sig -> le(_n, _I2), _sigP

-leLeft
_E1, _sig -> _I1, _sigP
---
le(_E1, _E2), _sig -> le(_I1, _E2), _sigP

-ne
_n1 |> __int32(_) _n2 |> __int32(_)
---
ne(_n1, _n2),_sig ->  __ne(_n1, _n2),_sig

-neRight
_n |> __int32(_)  _E2, _sig -> _I2,_sigP 
---
ne(_n, _E2),_sig -> ne(_n, _I2), _sigP

-neLeft
_E1, _sig -> _I1, _sigP 
---
ne(_E1, _E2),_sig -> ne(_I1, _E2), _sigP

-eq
_n1 |> __int32(_) _n2 |> __int32(_)
---
eq(_n1, _n2),_sig ->  __eq(_n1, _n2),_sig

-eqRight
_n |> __int32(_)  _E2, _sig -> _I2,_sigP 
---
eq(_n, _E2),_sig -> eq(_n, _I2), _sigP

-eqLeft
_E1, _sig -> _I1, _sigP 
---
eq(_E1, _E2),_sig -> eq(_I1, _E2), _sigP

// == CONTROL FLOW ==
-ifTrue 
---
if(True, _C1, _C2),_sig -> _C1, _sig

-ifFalse 
---
if(False, _C1, _C2),_sig -> _C2,_sig

-ifResolve
_E, _sig -> _EP, _sigP
---
if(_E,_C1,_C2),_sig -> if(_EP, _C1, _C2), _sigP

-while
---
while(_E, _C),_sig -> if(_E, seq(_C, while(_E,_C)), __done), _sig

-variable
---
deref(_R), _sig -> __get(_sig, _R), _sig

-play
_channel |> __int32(_) _phrase |> __string(_)
---
play(_channel, _phrase), _sig -> __user(1, _channel, _phrase), _sig

-playResolve
_phrase, _sig -> _phraseP, _sigP
---
play(_channel, _phrase), _sig -> play(_channel, _phraseP), _sigP

-setBpm
_n |> __int32(_)
---
setBpm(_n), _sig -> __user(0, _n), _sig

-setBpmResolve
_E1 -> _I1
---
setBpm(_E1), _sig -> setBpm(_I1), _sig

-concat
_phrase1 |> __string(_) _phrase2 |> __string(_)
---
concat(_phrase1, _phrase2), _sig -> __user(3, _phrase1, _phrase2), _sig

-concatResolveRight
_phrase1 |> __string(_) _phrase2, _sig -> _phrase2P, _sigP
---
concat(_phrase1, _phrase2), _sig -> concat(_phrase1, _phrase2P), _sigP

-concatResolveLeft
_phrase1, _sig -> _phrase1P, _sigP
---
concat(_phrase1, _phrase2), _sig -> concat(_phrase1P, _phrase2), _sigP

-repeat
_phrase |> __string(_) _n |> __int32(_)
---
repeat(_phrase, _n), _sig -> __user(4, _phrase, _n), _sig

-repeatResolveRight
_phrase |> __string(_) _n, _sig -> _nP, _sigP
---
repeat(_phrase, _n), _sig -> _repeat(_phrase, _nP), _sigP

-repeatResolveLeft
_phrase, _sig -> _phraseP, _sigP
---
repeat(_phrase, _n), _sig -> repeat(_phraseP, _n), _sigP

-printAvailableInstruments
---
printAvailableInstruments(), _sig -> __user(5)

// No resolving ints for this one - just set a given channel to an instrument
-setChannelInstrument
_channel |> __int32(_) _instrument |> __int32(_)
---
setChannelInstrument(_channel, _instrument), _sig -> __user(6, _channel, _instrument), _sig

// Play patterns simultaneously (done with multi-threading under the hood)
// Channels are loaded into a map in the backend rather than a built in map, because this allows us to clear the map after each call.

// Leaf node: put the channel and phrase into the internal map
-playConcurrentChannelsLeafNode
_channel |> __int32(_) _phrase |> __string(_) 
---
concChannel(_channel, _phrase), _sig -> __user(7, _channel, _phrase), _sig

// Resolve the phrase of a leaf node
-playConcurrentChannelsLeafNodeResolvePhrase
_channel |> __int32(_) _phrase, _sig -> _phraseP, _sigP
---
concChannel(_channel, _phrase), _sig -> concChannel(_channel, _phraseP), _sigP

// Inner node - may have children
-playConcurrentChannelsInnerNode
_channel |> __int32(_) _phrase |> __string(_) _next |> __done
---
concChannel(_channel, _phrase, _next), _sig -> concChannel(_channel, _phrase), _sig

// Inner node - resolve `_next` (another node)
-playConcurrentChannelsInnerNodeResolveNext
_channel |> __int32(_) _phrase |> __string(_) _next, _sig -> _nextP, _sigP
---
concChannel(_channel, _phrase, _next), _sig -> concChannel(_channel, _phrase, _nextP), _sigP

// Inner node - resolve the phrase to a string
-playConcurrentChannelsInnerNodeResolvePhrase
_phrase, _sig -> _phraseP, _sigP
---
concChannel(_channel, _phrase, _next), _sig -> concChannel(_channel, _phraseP, _next), _sigP

-playConcurrentChannelsDone
---
playConcurrent(__done), _sig -> __done, __user(8), _sig

-playConcurrentChannels
_concChannelList, _sig -> _concChannelListP, _sigP
---
playConcurrent(_concChannelList), _sig -> playConcurrent(_concChannelListP), _sigP

!trace 3
// Test arithmetic and comparisons
//!try seq(assign(a, 15), seq(seq(seq(assign(b, 9), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a)))))), assign(gcd, deref(a))), backend(1, 2, 3)))
//!try seq(seq(seq(seq(assign(a, 15), assign(b, 9)), while(ne(deref(a), deref(b)), if(gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a)))))), assign(gcd, deref(a))), backend(1, 2, 3))
//!try seq(assign(cMajScale, "[C:4:8, D:4:8, E:4:8, F:4:8, G:4:8, A:4:8, B:4:8, C:5:8]"),assign(x, 5)), __map
//!try add(1, 2), __map
//!try sub(1, 2), __map
//!try mul(4, 5), __map
//!try div(4, 5), __map
//!try div(9, 5), __map
//!try eq(1, 1), __map
//!try ne(1, 1), __map
//!try gt(1, 1), __map
//!try ge(1, 1), __map
//!try lt(1, 1), __map
//!try le(1, 1), __map

// Test if-then-else
//!try if(gt(2,1), assign(x, "True"), assign(x, "False")), __map

// Test if-then with no else (just use __done)
//!try if(lt(2, 1), assign(x,"True"), __done), __map
//!try seq( seq( seq( seq(assign(a, 15), assign(b, 9) ), while( ne(deref(a), deref(b)), if( gt(deref(a), deref(b)), assign(a, sub(deref(a), deref(b))), assign(b, sub(deref(b), deref(a))))) ), assign(gcd, deref(a))), __done), __map // Test while with sub !try seq( assign(a, 10), while( ne(deref(a), 11), assign(a, add(deref(a), 1)) ) ), __map

// Test while loop
//!try seq( setBpm(120), seq( assign( n, 0 ), seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), while( ne(deref(n), 4), seq( play(1, deref(x)), assign(n, add(deref(n), 1) ) ) ) ) )), __map

// test modulation
//!try seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), play(1, modulate( deref(x), 5 ) ) ) , __map
// Test modulation and assignment
//!try seq( setBpm(120), seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), seq( assign( y, modulate(deref(x), 5) ), seq( play(1, deref(x)), play(1, deref(y)) ) ) ) ), __map

// Test anonymous phrases modulated from a named phrase
//!try seq( setBpm(120), seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), seq( assign( n, 0 ), while( ne(deref(n), 4), seq( play(1, modulate(deref(x), deref(n)) ), assign(n, add(deref(n), 1)) ) ) ) ) ), __map

// Concatenate two phrases, assign to x, and play them.
//!try seq( setBpm(120), seq( assign( x, concat( "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8]", "[Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ) ), play(1, deref(x) ) )), __map

// Repeat phrase
//!try seq( setBpm(240), seq( assign( x, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]" ), play(1, repeat( deref(x), 4) ) ) ), __map

// Test printing available instruments of the Java synthesizer
//!try printAvailableInstruments(), __map

// Test setting instruments
//!try seq(setBpm(120), seq( setChannelInstrument(1, 90) , play(1, "[C4:4, E4:4, G4:4, C5:4]") ) ), __map

// Test chords in a phrase
//!try seq( setBpm(120), playConcurrent(concChannel(1, "[C4:8, E4:8, G4:8, C5:8, .:8, {G4-B4-D4}:8, .:8, {C4-E4-G4}:8, .:8, C2:4]"))), __map

// Test one channel concurrency
//!try seq( setBpm(120), playConcurrent( concChannel(1, "[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]") ) ), __map

// Test n-channel concurrency: sweet dreams with drums and melody!
!try seq(
  setBpm(120),
  seq(
  setChannelInstrument(1, 45),
  seq(assign(vocals, concat(
      concat("[.:4, {Eb4-Eb5}:4, {Eb4-Eb5}:4, {C4-C5}:8, {Eb4-Eb5}:8]" "[.:8, {Eb4-Eb5}:4, {Eb4-Eb5}:8, {D4-D5}:4, .:4]")
      ,concat("[{Eb4-Eb5}:8, {Eb4-Eb5}:8, {C4-C5}:8, {Eb4-Eb5}:8, .:4, {C4-C5}:4]", "[{Eb4-Eb5}:8, {F4-F5}:4, .:8, {Eb4-Eb5}:8, {D4-D5}:4, .:8]"))),
    seq(
      setChannelInstrument(2,128),
      playConcurrent(
        concChannel(1, repeat("[C3:8, C3:8, C4:8, C4:8, Eb4:8, Eb4:8, C4:8, C4:8, Ab2:8, Ab2:8, Ab3:8, C4:8, G2:8, G2:8, Bb3:8, C4:8]", 3),
          concChannel(2, repeat("[C3:4, C3:4, C3:4, C3:4]", 7),
            concChannel(3, repeat(deref(vocals), 1)))
    )))))), __map

// Test rhythmic scale
!try seq(setBpm(120),
  play(1, concat(
    concat("[C4:1, C4:2, C4:2, C4:4, C4:4, C4:4, C4:4, C4:8, C4:8, C4:8, C4:8, C4:8, C4:8, C4:8, C4:8]", repeat("[C4:16]", 15)),
    concat(repeat("[C4:32]", 31), repeat("[C4:64]", 63)))
    )), __map