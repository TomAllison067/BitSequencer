BitSequencer (music)

A: Informal language specification
=================================

BitSequencer allows the specification of musical phrases as lists of MIDI notes which can be:
* Assigned to variables and dereferenced
* Repeated
* Concatenated to one another
* Modulated
* Played one at a time
* Played concurrently with other phrases

S.1 Programs
------------
A BitSequencer program consists of one or more statements in which phrases can be constructed, assigned, and played.

Statements are separated by the ; operator. There is no statement terminator.

A sequence of whitespace characters can be used wherever one whitespace is valid.

S.2 Arithmetic and expressions
------------------------------
BitSequencer allows standard integer arithmetic. The operations supported are addition, subtraction, multiplication, division and exponentiation.

Non-keyword alphanumeric identifiers denote variables that may have integers or strings (musical phrases) bound to them.

Variables can be derefenced to obtain their integer or string value stored in the symbol table.

S.3 Predicates
--------------
BitSequencer allows comparison of two integers using relational operators that return a boolean result:
x > y       x greater than y
x < y       x less than y
x >= y      x greater than or equal to y
x <= y      x less than or equal to y
x != y      x not equal to y
x == y      x equal to y

BitSequencer also allows boolean comparions logical AND and logical OR:
x && y      x is true and y is true
x || y      x is true or y is true

Any non-zero value (positive or negative integers) are regarded as true, and 0 is regarded as false.

Boolean literals are written with the keywords 'True' and 'False'.

S.4 Selection statements
------------------------

BitSequencer provides two selection statements:

if _pred do _statement else _statement done
if _pred do _statement done

where _pred is a predicate as defined in section S.3, and _statement is any statement.

S.5 Assignments statements
--------------------------
BitSequencer provides one selection statement:

_identifier = _expression

where _identifier is an alphanumeric identifier, and _expression is an expression resulting in a phrase or integer.

S.6 Iteration statements
------------------------
BitSequencer provides two iteration statements:

while _pred do _statement done

where _pred is a predicate as defined in section S.3, and _statement is any statement.

for (_assignment; _pred; _assignment;) do _body done

where _assignment is an assignment statement as defined in section S.5, _pred is a boolean predicate and _statement is any statement.

S.7 Domain specific types
-------------------------
BitSequencer has the following domain specific types:

Phrase - a comma-delimited list of MIDI notes to be played in order written inside square brackets, 
         assignable to an identifier. Phrases can be appended or repeated with '+' or '*' operators.
    E.g:
        twoBarKickLoop = [C4:4, C4:4, C4:4, C4:4] * 2
        oneBarRest = [.:16] * 16
        cMajorScale = [C4:8, D4:8, E4:8, F4:8, G4:8, A4:8, B4:8, C4:8, {C4/E4/G4}:4]

  Phrases are represented by strings and can be stored in the symbol table with the assignment operator '='. The processing 
  and musical handling of phrase strings is handled by the backend.

  A note in a phrase consists of a MIDI note name, a colon, and then an integer representing its subdivision. For example,
  "C4:4" represents a crotchet (quarter note) middle C. "G5:8" represents a quaver (eighth note) G in the octave above middle C.
  
  Chords can be written with the following syntax: "{C4/E4/G4}:4", where inside the curly braces is a list of MIDI notes separated by a slash, and the
  colon and integer after the closing brace represents the subdivision of the entire chord.

  Rests are written with a single dot, followed by a colon and the subdivision.

  A phrase can be played on one channel with the `play(channel, phrase)` domain-specific operation, or multiple phrases can be played across
  multiple channels with the `playConcurrent(concChannel(channel, phrase, concChannel(channel, phrase)))` domain-specific operation. This operation
  can be nested as many times as you like with the pattern `concChannel(channel, phrase, concChannel(...))`.
    
Channel - a channel consists of a mapping from an integer key to an integer representing a MIDI instrument. The full list of MIDI instruments
          supported by BitSequencer (from the Java MIDI subsystem) can be viewed in `documentation/instrmuentlist.txt`.

  Channels have no constructor. They do not need to be explicitly constructed as they already exist in the backend, but can be mapped to an instrument 
  with the `setChannelInstrument` domain-specific operation. If no instrument is provided to a channel, any patterns played
  on the channel will be played with the default instrument 0 (Acoustic Grand Piano). 

S.8 Domain specific operations
------------------------------
BitSequencer provides concatenation, repetition and modulation for phrases. In this context, the '+' symbol acts as the concatenation operator, '*' as the 
repetition operator and '^' as the modulation operator.

'++' acts as follows:
    phrase1 ++ phrase2: returns a single new phrase that is the concatenation of phrase1 and phrase2, 
    e.g. "[C4:8, D5:4]" ++ "[E4:4, {C2/E2/G2}:8]" returns "[C4:8, D5:4, E4:4, {C2/E2/G2}:8]".
    
'**' acts as follows:
    phrase1 ** k: returns a new phrase consisting of k instances of phrase1 concatenated, e.g. "[C4:4, E4:4, G4:4]" ** 2
    returns "[C4:4, E4:4, G4:4, C4:4, E4:4, G4:4]".

'^^' acts as follows:
    phrase1 ^^ k: returns a new phrase consisting of the notes of phrase1 modulated by k semitones, e.g.
    "[C4:4, E4:4, G4:4]" ^^ 5 returns "[F4:4, A4:4, C5:4]", and "[C4:4, E4:4, G4:4]" ^^ -4 returns "[G#3:4, C4:4, D#4:4]".

Signatures for the operations above can be found in section B.

Overall, BitSequencer provides 9 DSL-type statements which call corresponding methods in the ValueUserPlugin class:
  
  modulate(_phrase:String _n:String):String calls the backend to return a phrase modulated by _n semitones.

  play(_channel:int, _phrase:String) calls the backend to play a phrase on the given channel.

  setBpm(_n:int) sets the tempo all phrases will be played at.

  concat(_phrase1:String, _phrase2:String):String calls the backend to return _phrase1 and _phrase2 concatenated.

  repeat(_phrase:String, _n:int):String calls the backend to return _n instances of a phrase concatenated to each other.

  printAvailableInstruments() calls the backend to print the available instruments and their corresponding numbers of the Java MIDI subsystem.

  setChannelInstrument(_channel:int, _instrument:int) calls the backend to map a particular channel to a particular instrument.

  concChannel(_channel:int, _phrase:String) is used to build up a list of channels and phrases to be played concurrently.

  playConcurrent(_concChannels:List) accepts a nested list of concurrent channels, taking the form 
      of concChannel(_channel:int, _phrase:String, _next:concChannel) or concChannel(_channel:int, _phrase:String) to terminate the nested list.
      When the list is processed, playConcurrent calls the backend to play the given channels/phrases concurrently.


B: Internal syntax constructors and arities
===========================================

Constructors for domain-specific types
--------------------------------------
InstrumentTrack(_channel_id:__int32, _trackName:__string, _instrument:__string):InstrumentTrack
Create a new instrument track with id _channel_id, human-readable name _trackName, playing instrument _instrument.

Note(_pitch:__string, _length:__int32):Note
Create a new note which should play pitch _pitch for the equivalenth of _length semiquavers,
e.g. note("Ab", 4) represents an Ab with crotchet length.

Phrase(_notes:__list, _length:__int32):Phrase
A phrase is an constructed from an ordered list of notes. Evaluate _length to be the sum of the lengths of notes in the list.

Pattern(__channels:__int32, __phrases:__array):Pattern
A pattern consists of an array of phrases, with each array index corresponding to the numerical ID
of an instrument track (the corresponding track will play the phrase). The interpreter will enforce
that all phrases belonging to a pattern are the same length, otherwise the pattern is illegal.


Basic primitives
----------------
int(_int:__int32)
A basic integer type

String(_string:__string)
Basic String type


Operations, syntax, arities
---------------------------
add(_E1:__int32, _E2:__int32):__int32
Integer addition, E_1 + E_2

sub(_E1:__int32, _E2:__int32):__int32
Integer subtraction, E_1 - E_2

mult(_E1:__int32, _E2:__int32):__int32
Integer addition, E_1 * E_2

div(_E1:__int32, E2:__int32):__int32
Integer floor division, E1 / E2

exp(_E1:__int32, E2:__int32):__int32
Integer exponentiation, E1 ^ E2

gt(_E1:__int32, _E2:__int32):__boolean
Integer greater-than, E1 > E2

ge(_E1:__int32, _E2:__int32):__boolean
Integer greater-than or equal E1 >= E2

lt(_E1:__int32, _E2:__int32):__boolean
Integer lesser-than, E1 < E2

le(_E1:__int32, _E2:__int32):__boolean 
Integer lesser-than or equal, E1 <= E2

ne(_E1:__int32, _E2:__int32):__boolean
Integer not-equals, E1 ne E2

eq(_E1:__int32, _E2:__int32):__boolean 
Integer equality, E1 equals E2

and(_E1:__boolean, E2:__boolean):__boolean
Boolean logical AND, E1 and E2

or(_E1:__boolean, E2:__boolean):__boolean
Boolean logical OR, E1 or E2

concat(_a:__string, _b:__string):__string
Return a new phrase that is the concatenation of phrase _a and _b_.

repeat(_a:__string, _x:__int32):__string
Construct a new phrase from phrase _a by concatenating _x instances of _a together.

play(_pattern:Pattern)
Call the Java MIDI system to play the tracks in the given pattern.

modulate(_phrase:String, _n:__int32):__string
Return a new phrase that is the modulaltion of _phrase by _n semitones

seq(_S1, _S2)
Execute _S1, followed by _S2.

if(_P:__boolean, _S1)
Selection, if _P evaluates to true then execute _S1

ifElse(_P:__boolean, _S1, _S2)
Selection, if _P evaluates to true then execute _S1, else execute _S2

while(_P:__boolean, _S1, _S2)
Iteration, while _P is true execute _S1, then execute _S2

for(_S1, _P:__boolean, _S2, _S3)
Iteration, execute _S1, then while _P is true execute _S3 and then _S2.

assign(_ID:__quote, __n:__bool) bind _n to name _ID in variables map
assign(_ID:__quote, __n:__int32) bind _n to name _ID in variables map
assign(_ID:__quote, __n:__string) bind _n to name _ID in variables map 
deref(_N):__int retrieve binding for name _N in variables map
deref(_N):__string retrieve binding for name _N in variables map

play(_channel:__int32, _phrase:__string):__done
Call the backend to play _phrase on channel number _channel

setBpm(_n:__int32):__done
Call the backend to set the tempo all phrases will be played at

printAvailableInstruments():__done
Call the backend to print all available instruments in the Java MIDI subsystem to the terminal

setChannelInstrument(_channel:__int32, _instrument:__int32):__done
Call the backend to set the instrument of _channel to _instrument

concChannel(_channel:__int32, _phrase:__string):__done
Call the backend to put a mapping of _channel to _phrase in an internal map, used to play phrases concurrently.

concChannel(_channel:__int32, _phrase:__string, _next:__quote)
Resolve _next to the two-arity concChannel constructor, allowing lists of concurrent channels to be added to the internal map.
This will eventually resolve to __done as per the above constructor.

playConcurrent(__done):__done
Call the backend to play the channels and phrases in the backend's concurrent channel map, and then clear the map.

playConcurrent(_concChannelList:__quote)
Resolve _concChannelList to a series of concChannel terms, and eventually resolve to __done as per the previous playConcurrent constructor.
