(**** Entry ****)
statement ::= seq^^ | assign^^ | setBpm^^ | play^^ | playConcurrent^^ | directive^^
(***************)

(**** Directives ****)
directive ::= setBpm^^ | setChannelInstrument^^
setBpm ::= '_SET_BPM'^ integer ';'^
setChannelInstrument ::= '_SET_INSTRUMENT'^ integer integer ';'^
(********************)

(**** Sequencing and statements ****)
seq ::= statement statement

assign ::= identifier '='^ phrase0 ';'^

play ::= 
  'play'^ '('^ integer ','^ phrase0 ')'^ ';'^

playConcurrent ::=
  'playConcurrent'^ '('^ concChannel ')'^ ';'^

concChannel ::= integer ':'^ phrase0
  | integer ':'^ phrase0 ','^ concChannel

(* Concatenation *)
phrase0 ::= phrase1^^
  | phrase0 concat^^ phrase1

(* Repetition *)
phrase1 ::= phrase2^^
  | phrase1 repeat^^ e0

(* Modulation *)
phrase2 ::= phrase3^^
  | phrase2 modulate^^ e0

(* Strings, derefences and parentheses *)
phrase3 ::= string^^
  | deref^^ 
  | '('^ phrase0^^ ')'^

e0 ::= e1^^
  | negate^^ e0
 
e1 ::= integer^^
  | '('^ e0^^ ')'^
(***********************************)

(**** Operators and dereferencing ****)
deref ::= identifier

(* Phrase operators *)
concat ::= '+'^
repeat ::= '*'^
modulate ::= '^'^

(* Integer operators *)
negate ::= '-'^
(*************************************)

(**** Builtins ****)
identifier ::= &ID^^

ID <leftExtent:int rightExtent:int lexeme:String v:String> 
  ::= &ID^^ 
    {
      ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent);
      ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent);
    }

string <leftExtent:int rightExtent:int lexeme:String v:String> 
  ::= &STRING_DQ^^ 
  { 
    string.lexeme = artLexeme(string.leftExtent, string.rightExtent); string.v = artLexemeAsString(string.leftExtent, string.rightExtent);
  }

integer <leftExtent:int rightExtent:int lexeme:String v:ARTValueInteger32> ::= 
  &INTEGER^^ { integer.lexeme = artLexeme(integer.leftExtent, integer.rightExtent); 
  integer.v = new ARTValueInteger32(artLexemeAsInteger(integer.leftExtent, integer.rightExtent)); }