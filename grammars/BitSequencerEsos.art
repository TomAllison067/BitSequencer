(**** Entry ****)
statement ::= seq^^ | assign^^ | setBpm^^ | play^^ | playConcurrent^^ | directive^^ 
(***************)

(**** Directives ****)
directive ::= setBpm^^ | setChannelInstrument^^
setBpm ::= '_SET_BPM'^ integer ';'^
setChannelInstrument ::= '_SET_INSTRUMENT'^ integer integer ';'^
(********************)

(**** Sequencing and statements ****)
seq ::= statement statement

assign ::= identifier '='^ phrase0 ';'^
  | identifier '='^ e0 ';'^

play ::= 
  'play'^ '('^ integer ','^ phrase0 ')'^ ';'^

playConcurrent ::=
  'playConcurrent'^ '('^ concChannel ')'^ ';'^

concChannel ::= integer ':'^ phrase0
  | integer ':'^ phrase0 ','^ concChannel

(* Phrase expressions *)
(* Concatenation *)
phrase0 ::= phrase1^^
  | phrase0 concat^^ phrase1

(* Repetition *)
phrase1 ::= phrase2^^
  | phrase1 repeat^^ e0

(* Modulation *)
phrase2 ::= phrase3^^
  | phrase2 modulate^^ e0

(* Strings, derefences and parentheses *)
phrase3 ::= string^^
  | deref^^ 
  | '('^ phrase0^^ ')'^

(* Integer expressions *)
(* Logical OR *)
e0 ::= e1^^
  | e0 or^^ e1

(* Logical AND *)
e1 ::= e2^^
  | e1 and^^ e2
  | e1 or^^ e2

(* Equality or inequality *)
e2 ::= e3^^
  | e2 eq^^ e3
  | e2 ne^^ e3
 
(* Relational *)
e3 ::= e4^^
  | e3 lt^^ e4
  | e3 gt^^ e4
  | e3 le^^ e4
  | e4 ge^^ e4

(* Addition/Subtraction *)
e4 ::= e5^^
  | e4 sub^^ e5
  | e4 add^^ e5

(* Multiplication/Division *)
e5 ::= e6^^
  | e5 mult^^ e6
  | e5 div^^ e6

(* Exponentiation *)
e6 ::= e7^^
  | e7 exp^^ e6

(* Integers, and parentheses *)
e7 ::= integer^^
  | boolean^^
  | '('^ e0^^ ')'^
(***********************************)

(**** Operators and dereferencing ****)
deref ::= identifier

(* Phrase operators *)
concat ::= '+'^
repeat ::= '*'^
modulate ::= '^'^

(* Integer operators *)
negate ::= '-'^
or ::= '||'^
and ::= '&&'^
eq ::= '=='^
ne ::= '!='^
lt ::= '<'^
gt ::= '>'^
le ::= '<='^
ge ::= '>='^
sub ::= '-'^
add ::= '+'^
mult ::= '*'^
div ::= '/'^
exp ::= '^'^

(**** Builtins ****)
identifier ::= &ID^^

ID <leftExtent:int rightExtent:int lexeme:String v:String> 
  ::= &ID^^ 
    {
      ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent);
      ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent);
    }

string <leftExtent:int rightExtent:int lexeme:String v:String> 
  ::= &STRING_DQ^^ 
  { 
    string.lexeme = artLexeme(string.leftExtent, string.rightExtent); string.v = artLexemeAsString(string.leftExtent, string.rightExtent);
  }

integer <leftExtent:int rightExtent:int lexeme:String v:ARTValueInteger32> ::= 
  &INTEGER^^ { integer.lexeme = artLexeme(integer.leftExtent, integer.rightExtent); 
  integer.v = new ARTValueInteger32(artLexemeAsInteger(integer.leftExtent, integer.rightExtent)); }

boolean ::= True^^ | False^^

True ::= 'True'^
False ::= 'Talse'^